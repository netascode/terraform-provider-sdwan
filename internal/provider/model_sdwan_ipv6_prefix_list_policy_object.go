// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type IPv6PrefixList struct {
	Id      types.String            `tfsdk:"id"`
	Name    types.String            `tfsdk:"name"`
	Entries []IPv6PrefixListEntries `tfsdk:"entries"`
}

type IPv6PrefixListEntries struct {
	Prefix types.String `tfsdk:"prefix"`
	Le     types.Int64  `tfsdk:"le"`
	Ge     types.Int64  `tfsdk:"ge"`
}

func (data IPv6PrefixList) getType() string {
	return "ipv6prefix"
}

func (data IPv6PrefixList) toBody(ctx context.Context) string {
	body, _ := sjson.Set("", "description", "Desc Not Required")
	body, _ = sjson.Set(body, "name", data.Name.ValueString())
	body, _ = sjson.Set(body, "type", "ipv6prefix")
	if len(data.Entries) > 0 {
		body, _ = sjson.Set(body, "entries", []interface{}{})
		for _, item := range data.Entries {
			itemBody := ""
			if !item.Prefix.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "ipv6Prefix", item.Prefix.ValueString())
			}
			if !item.Le.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "le", fmt.Sprint(item.Le.ValueInt64()))
			}
			if !item.Ge.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "ge", fmt.Sprint(item.Ge.ValueInt64()))
			}
			body, _ = sjson.SetRaw(body, "entries.-1", itemBody)
		}
	}
	return body
}

func (data *IPv6PrefixList) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("entries"); value.Exists() {
		data.Entries = make([]IPv6PrefixListEntries, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := IPv6PrefixListEntries{}
			if cValue := v.Get("ipv6Prefix"); cValue.Exists() {
				item.Prefix = types.StringValue(cValue.String())
			} else {
				item.Prefix = types.StringNull()
			}
			if cValue := v.Get("le"); cValue.Exists() {
				item.Le = types.Int64Value(cValue.Int())
			} else {
				item.Le = types.Int64Null()
			}
			if cValue := v.Get("ge"); cValue.Exists() {
				item.Ge = types.Int64Value(cValue.Int())
			} else {
				item.Ge = types.Int64Null()
			}
			data.Entries = append(data.Entries, item)
			return true
		})
	}
}
